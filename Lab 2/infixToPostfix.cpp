/*
 * Name: William Cooper
 * Date Submitted: 2/6/2024
 * Lab Section: 003
 * Assignment Name: infixToPostfix
 */

#include <string>
#include <stack>
#include <iostream>
#include <vector>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '%');
}


int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/' || op == '%')
        return 2;
    return 0;
}

int infixToPostfix(string infix[], int length, string postfix[]) {
    stack<char> operators;
    int postfixIndex = 0;

    for (int i = 0; i < length; ++i) {
        string token = infix[i];

        // If token is an operand, append it to postfix
        if (isdigit(token[0])) {
            postfix[postfixIndex++] = token;
        }
        // If token is an operator
        else if (isOperator(token[0])) {
            while (!operators.empty() && operators.top() != '(' && precedence(operators.top()) >= precedence(token[0])) {
                postfix[postfixIndex++] = operators.top();
                operators.pop();
            }
            operators.push(token[0]);
        }
        // If token is '('
        else if (token[0] == '(') {
            operators.push('(');
        }
        // If token is ')'
        else if (token[0] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                postfix[postfixIndex++] = operators.top();
                operators.pop();
            }
            if (operators.empty() || operators.top() != '(') {
                return 0; // Mismatched parenthesis error
            }
            operators.pop(); // Discard the '('
        }
    }

    // Append remaining operators to postfix
    while (!operators.empty()) {
        if (operators.top() == '(') {
            return 0; // Mismatched parenthesis error
        }
        postfix[postfixIndex++] = operators.top();
        operators.pop();
    }

    return postfixIndex;
}

/* int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "-", "10",
                         "/", "5", "%", "3"};
    string postfixExp[11] = {"2", "3", "4", "*", "+", "10", "5",
                             "/", "3", "%", "-"};
    string postfixTest[11];
    int postfixLength = infixToPostfix(infixExp, 11, postfixTest);

    //ASSERT_THAT(postfixExp, ElementsAreArray(postfixTest));
    for (int i=0; i<11; i++)
    {
        if (postfixTest[i] != postfixExp[i])
        {
            cout << "Mismatch at position " << i << ": expected/correct value " << postfixExp[i] << ", actual value when testing " << postfixTest[i] << ".\n";
            return 1;
        }
    }
    cout << "Passed" << endl;
    return 0;
}
*/